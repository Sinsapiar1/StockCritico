import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import sys
import os
import time

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from data_processor import ERPDataProcessor
from analyzer import StockAnalyzer
from utils import ExcelExporter, AlertManager, format_number, format_currency

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Stock Analyzer Pro",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para dise√±o moderno y responsivo
st.markdown("""
<style>
    /* Reset y base */
    .main .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1200px;
    }
    
    /* Header principal */
    .hero-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 2rem;
        border-radius: 20px;
        text-align: center;
        color: white;
        margin-bottom: 3rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    
    .hero-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .hero-subtitle {
        font-size: 1.3rem;
        opacity: 0.9;
        font-weight: 300;
    }
    
    /* Cards de pasos */
    .step-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        border-left: 5px solid #667eea;
        margin-bottom: 2rem;
        transition: transform 0.3s ease;
    }
    
    .step-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
    }
    
    .step-number {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    
    .step-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }
    
    .step-description {
        color: #7f8c8d;
        font-size: 1rem;
        line-height: 1.6;
    }
    
    /* √Årea de upload mejorada */
    .upload-zone {
        border: 3px dashed #667eea;
        border-radius: 15px;
        padding: 2rem;
        text-align: center;
        background: #f8f9ff;
        margin: 1rem 0;
        transition: all 0.3s ease;
    }
    
    .upload-zone:hover {
        border-color: #764ba2;
        background: #f0f2ff;
    }
    
    /* Progress bar personalizada */
    .progress-container {
        background: #e9ecef;
        border-radius: 10px;
        padding: 5px;
        margin: 1rem 0;
    }
    
    .progress-bar {
        background: linear-gradient(90deg, #667eea, #764ba2);
        height: 20px;
        border-radius: 8px;
        transition: width 0.5s ease;
    }
    
    /* M√©tricas mejoradas */
    .metric-container {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 3px 15px rgba(0,0,0,0.1);
        text-align: center;
        border-top: 4px solid #667eea;
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }
    
    .metric-label {
        color: #7f8c8d;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }
    
    /* Alertas mejoradas */
    .alert-critical {
        background: linear-gradient(135deg, #ff6b6b, #ff5252);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    .alert-warning {
        background: linear-gradient(135deg, #ffa726, #ff9800);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    .alert-success {
        background: linear-gradient(135deg, #66bb6a, #4caf50);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    /* Botones mejorados */
    .stButton > button {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 25px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
    }
    
    /* Tabs mejoradas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        border: none;
        font-weight: 500;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }
    
    /* Responsividad */
    @media (max-width: 768px) {
        .hero-title {
            font-size: 2rem;
        }
        
        .hero-subtitle {
            font-size: 1rem;
        }
        
        .step-card {
            padding: 1.5rem;
        }
        
        .metric-value {
            font-size: 2rem;
        }
    }
    
    /* Ocultar elementos de Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Loading animation */
    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 2rem auto;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
""", unsafe_allow_html=True)

def main():
    # Inicializar session state
    if 'step' not in st.session_state:
        st.session_state.step = 0
    if 'curva_abc_file' not in st.session_state:
        st.session_state.curva_abc_file = None
    if 'stock_file' not in st.session_state:
        st.session_state.stock_file = None
    if 'analysis_complete' not in st.session_state:
        st.session_state.analysis_complete = False

    # Header principal
    show_hero_header()
    
    # Control de flujo principal
    if st.session_state.step == 0:
        show_welcome_screen()
    elif st.session_state.step == 1:
        show_upload_curva_abc()
    elif st.session_state.step == 2:
        show_upload_stock()
    elif st.session_state.step == 3:
        show_processing()
    elif st.session_state.step == 4:
        show_results()

def show_hero_header():
    """Header principal con dise√±o atractivo"""
    st.markdown("""
    <div class="hero-header">
        <div class="hero-title">üéØ Stock Analyzer Pro</div>
        <div class="hero-subtitle">Sistema Inteligente de An√°lisis de Inventario Cr√≠tico</div>
        <div style="margin-top: 1rem; font-size: 0.9rem; opacity: 0.8;">
            Desarrollado por <strong>Adeodato Cornejo</strong> | An√°lisis Experto de Stock vs Consumo
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_welcome_screen():
    """Pantalla de bienvenida moderna"""
    
    # Progress bar
    show_progress_bar(0, 4)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="step-card">
            <div style="text-align: center;">
                <h2 style="color: #2c3e50; margin-bottom: 2rem;">Bienvenido al An√°lisis Profesional</h2>
                <p style="font-size: 1.2rem; color: #7f8c8d; line-height: 1.8; margin-bottom: 2rem;">
                    Transforma tus datos de inventario en insights accionables con solo dos clics. 
                    Nuestro sistema analiza autom√°ticamente tu Curva ABC y Stock actual para 
                    identificar productos cr√≠ticos y generar reportes ejecutivos.
                </p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Caracter√≠sticas principales
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            st.markdown("""
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">‚ö°</div>
                <h4 style="color: #2c3e50;">Procesamiento Autom√°tico</h4>
                <p style="color: #7f8c8d;">Maneja archivos complejos del ERP sin intervenci√≥n manual</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col_b:
            st.markdown("""
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìä</div>
                <h4 style="color: #2c3e50;">Dashboards Ejecutivos</h4>
                <p style="color: #7f8c8d;">Visualizaciones profesionales y reportes listos para presentar</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col_c:
            st.markdown("""
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üéØ</div>
                <h4 style="color: #2c3e50;">Stock Cr√≠tico</h4>
                <p style="color: #7f8c8d;">Identifica productos que requieren atenci√≥n inmediata</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Bot√≥n de inicio
        st.markdown("<br>", unsafe_allow_html=True)
        
        if st.button("üöÄ Comenzar An√°lisis", key="start_analysis"):
            st.session_state.step = 1
            st.rerun()

def show_upload_curva_abc():
    """Paso 1: Upload de archivo Curva ABC"""
    
    show_progress_bar(1, 4)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="step-card">
            <div class="step-number">1</div>
            <div class="step-title">Subir Archivo Curva ABC</div>
            <div class="step-description">
                Selecciona el archivo exportado desde tu ERP que contiene los datos de consumo 
                y clasificaci√≥n ABC de productos.
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown('<div class="upload-zone">', unsafe_allow_html=True)
        
        curva_abc_file = st.file_uploader(
            "üìä Arrastra aqu√≠ tu archivo Curva ABC",
            type=['xlsx', 'xls'],
            help="Formato: Excel (.xlsx, .xls) - Exportado desde el ERP",
            label_visibility="visible"
        )
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        if curva_abc_file:
            st.session_state.curva_abc_file = curva_abc_file
            
            # Mostrar informaci√≥n del archivo
            st.markdown("""
            <div class="alert-success">
                ‚úÖ Archivo cargado correctamente: {} ({:.2f} MB)
            </div>
            """.format(curva_abc_file.name, curva_abc_file.size / 1024 / 1024), unsafe_allow_html=True)
            
            # Bot√≥n para continuar
            if st.button("‚û°Ô∏è Continuar al Siguiente Paso", key="next_to_stock"):
                st.session_state.step = 2
                st.rerun()
        
        # Bot√≥n para volver
        if st.button("‚¨ÖÔ∏è Volver al Inicio", key="back_to_start"):
            st.session_state.step = 0
            st.rerun()

def show_upload_stock():
    """Paso 2: Upload de archivo Stock"""
    
    show_progress_bar(2, 4)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="step-card">
            <div class="step-number">2</div>
            <div class="step-title">Subir Archivo de Stock</div>
            <div class="step-description">
                Selecciona el archivo que contiene tu inventario actual con c√≥digos de productos 
                y cantidades disponibles.
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Mostrar archivo ABC ya cargado
        if st.session_state.curva_abc_file:
            st.markdown("""
            <div style="background: #e8f5e8; padding: 1rem; border-radius: 10px; margin-bottom: 1rem;">
                ‚úÖ <strong>Curva ABC:</strong> {} ya cargado
            </div>
            """.format(st.session_state.curva_abc_file.name), unsafe_allow_html=True)
        
        st.markdown('<div class="upload-zone">', unsafe_allow_html=True)
        
        stock_file = st.file_uploader(
            "üì¶ Arrastra aqu√≠ tu archivo de Stock",
            type=['xlsx', 'xls'],
            help="Formato: Excel (.xlsx, .xls) - Inventario actual",
            label_visibility="visible"
        )
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        if stock_file:
            st.session_state.stock_file = stock_file
            
            # Mostrar informaci√≥n del archivo
            st.markdown("""
            <div class="alert-success">
                ‚úÖ Archivo cargado correctamente: {} ({:.2f} MB)
            </div>
            """.format(stock_file.name, stock_file.size / 1024 / 1024), unsafe_allow_html=True)
            
            # Bot√≥n para procesar
            if st.button("üîÆ Procesar An√°lisis Completo", key="process_analysis"):
                st.session_state.step = 3
                st.rerun()
        
        # Bot√≥n para volver
        if st.button("‚¨ÖÔ∏è Volver al Paso Anterior", key="back_to_curva"):
            st.session_state.step = 1
            st.rerun()

def show_processing():
    """Paso 3: Procesamiento autom√°tico"""
    
    show_progress_bar(3, 4)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="step-card">
            <div class="step-number">3</div>
            <div class="step-title">Procesando An√°lisis Inteligente</div>
            <div class="step-description">
                Nuestro sistema est√° analizando tus archivos y generando insights profesionales. 
                Este proceso toma aproximadamente 30-60 segundos.
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Animaci√≥n de carga
        st.markdown('<div class="loading-spinner"></div>', unsafe_allow_html=True)
        
        # Progress text
        progress_text = st.empty()
        progress_bar = st.progress(0)
        
        # Simular procesamiento con pasos
        steps = [
            "üîç Analizando estructura de archivos...",
            "üìä Procesando datos de Curva ABC...", 
            "üì¶ Consolidando informaci√≥n de Stock...",
            "üéØ Calculando stock cr√≠tico...",
            "üìà Generando m√©tricas y KPIs...",
            "üé® Creando visualizaciones...",
            "‚úÖ Finalizando an√°lisis..."
        ]
        
        for i, step in enumerate(steps):
            progress_text.text(step)
            progress_bar.progress((i + 1) / len(steps))
            time.sleep(0.8)  # Simular tiempo de procesamiento
        
        # Procesamiento real
        try:
            processor = ERPDataProcessor()
            
            # Procesar archivos
            curva_abc_data = processor.process_curva_abc(st.session_state.curva_abc_file)
            stock_data = processor.process_stock(st.session_state.stock_file)
            analysis_data = processor.calculate_coverage_analysis(8)  # Default 8 d√≠as
            
            # Guardar en session state
            st.session_state.analysis_data = analysis_data
            st.session_state.processor = processor
            st.session_state.analysis_complete = True
            
            progress_text.text("üéâ ¬°An√°lisis completado exitosamente!")
            progress_bar.progress(1.0)
            
            time.sleep(1)
            st.session_state.step = 4
            st.rerun()
            
        except Exception as e:
            error_msg = str(e)
            st.markdown(f"""
            <div class="alert-critical">
                ‚ùå Error en el procesamiento: {error_msg}
            </div>
            """, unsafe_allow_html=True)
            
            # Mostrar sugerencias seg√∫n el tipo de error
            if "stock" in error_msg.lower():
                st.markdown("""
                <div class="alert-warning">
                    üí° <strong>Sugerencias para el archivo de Stock:</strong><br>
                    ‚Ä¢ Verifica que el archivo contenga c√≥digos de productos num√©ricos<br>
                    ‚Ä¢ Aseg√∫rate de que tenga columnas con descripciones y cantidades<br>
                    ‚Ä¢ El archivo debe estar en formato Excel (.xlsx o .xls)<br>
                    ‚Ä¢ Revisa que no tenga protecci√≥n por contrase√±a
                </div>
                """, unsafe_allow_html=True)
            elif "abc" in error_msg.lower():
                st.markdown("""
                <div class="alert-warning">
                    üí° <strong>Sugerencias para el archivo Curva ABC:</strong><br>
                    ‚Ä¢ Debe contener c√≥digos de productos y consumos<br>
                    ‚Ä¢ Verifica que tenga datos de clasificaci√≥n ABC<br>
                    ‚Ä¢ Aseg√∫rate de que sea la exportaci√≥n correcta del ERP
                </div>
                """, unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ Reintentar", key="retry_processing"):
                    st.session_state.step = 3
                    st.rerun()
            
            with col2:
                if st.button("‚¨ÖÔ∏è Volver a Subir Archivos", key="back_to_upload"):
                    st.session_state.step = 1
                    st.rerun()

def show_results():
    """Paso 4: Mostrar resultados del an√°lisis"""
    
    show_progress_bar(4, 4)
    
    if not st.session_state.analysis_complete:
        st.error("No hay an√°lisis completado")
        return
    
    data = st.session_state.analysis_data
    analyzer = StockAnalyzer(data)
    
    # Header de resultados
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="color: #2c3e50; font-size: 2.5rem; margin-bottom: 0.5rem;">üìä An√°lisis Completado</h1>
        <p style="color: #7f8c8d; font-size: 1.2rem;">Dashboard ejecutivo generado autom√°ticamente</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Alertas cr√≠ticas
    alerts = AlertManager.check_critical_alerts(data)
    if alerts:
        for alert in alerts:
            if alert['type'] == 'error':
                st.markdown(f"""
                <div class="alert-critical">
                    üö® <strong>{alert['title']}:</strong> {alert['message']}
                </div>
                """, unsafe_allow_html=True)
            elif alert['type'] == 'warning':
                st.markdown(f"""
                <div class="alert-warning">
                    ‚ö†Ô∏è <strong>{alert['title']}:</strong> {alert['message']}
                </div>
                """, unsafe_allow_html=True)
    
    # KPIs principales
    show_main_kpis(analyzer)
    
    # Tabs con an√°lisis detallado
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Dashboard Principal", 
        "üéØ An√°lisis por Curva ABC", 
        "üçΩÔ∏è An√°lisis por Servicios",
        "üìà An√°lisis Avanzado",
        "üì§ Exportar Reportes"
    ])
    
    with tab1:
        show_dashboard_tab(analyzer)
    
    with tab2:
        show_curva_abc_tab(analyzer)
    
    with tab3:
        show_services_analysis_tab(analyzer)
    
    with tab4:
        show_advanced_analysis_tab(analyzer)
    
    with tab5:
        show_export_tab(analyzer, data)
    
    # Bot√≥n para nuevo an√°lisis
    st.markdown("<br><br>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col2:
        if st.button("üîÑ Realizar Nuevo An√°lisis", key="new_analysis"):
            # Reset session state
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
    
    # Footer profesional
    st.markdown("<br><br>", unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 10px; margin-top: 3rem;">
        <div style="color: #6c757d; font-size: 0.9rem;">
            <strong>üéØ Stock Analyzer Pro</strong> - Sistema Experto de An√°lisis de Inventario<br>
            Desarrollado por <strong style="color: #667eea;">Adeodato Cornejo</strong><br>
            <small>An√°lisis inteligente de stock vs consumo | Metodolog√≠a experta en gesti√≥n de inventarios</small>
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_progress_bar(current_step, total_steps):
    """Muestra barra de progreso del flujo"""
    progress_percentage = (current_step / total_steps) * 100
    
    st.markdown(f"""
    <div class="progress-container">
        <div class="progress-bar" style="width: {progress_percentage}%;"></div>
    </div>
    <div style="text-align: center; color: #7f8c8d; margin-bottom: 2rem;">
        Paso {current_step} de {total_steps}
    </div>
    """, unsafe_allow_html=True)

def show_main_kpis(analyzer):
    """Dashboard principal profesional con insights inteligentes"""
    
    metrics = analyzer.get_summary_metrics()
    data = analyzer.data
    
    # Header con contexto claro
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h2 style="color: #2c3e50; margin-bottom: 0.5rem;">üìä An√°lisis de Cobertura de Stock</h2>
        <p style="color: #7f8c8d; font-size: 1.1rem;">
            Evaluaci√≥n de d√≠as de cobertura basada en consumo hist√≥rico vs stock actual
        </p>
        <div style="background: #e3f2fd; padding: 1rem; border-radius: 8px; margin-top: 1rem;">
            <strong>üßÆ Metodolog√≠a de C√°lculo:</strong><br>
            <code>Consumo Diario = Consumo Total del Per√≠odo √∑ 8 d√≠as (01/09 - 08/09/2025)</code><br>
            <code>D√≠as de Cobertura = Stock Actual √∑ Consumo Promedio Diario</code>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # KPIs principales con explicaciones
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="metric-container">
            <div style="font-size: 2.5rem; margin-bottom: 0.5rem;">üì¶</div>
            <div class="metric-value">{metrics['total_productos']}</div>
            <div class="metric-label">Productos Analizados</div>
            <div style="color: #7f8c8d; font-size: 0.8rem; margin-top: 0.5rem;">
                Con stock y consumo v√°lidos
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        critical_pct = (metrics['productos_criticos'] / metrics['total_productos'] * 100) if metrics['total_productos'] > 0 else 0
        urgency_icon = "üö®" if critical_pct > 15 else "‚ö†Ô∏è" if critical_pct > 5 else "‚úÖ"
        
        st.markdown(f"""
        <div class="metric-container" style="border-top-color: #ff6b6b;">
            <div style="font-size: 2.5rem; margin-bottom: 0.5rem;">{urgency_icon}</div>
            <div class="metric-value" style="color: #ff6b6b;">{metrics['productos_criticos']}</div>
            <div class="metric-label">Stock Cr√≠tico</div>
            <div style="color: #ff6b6b; font-size: 0.8rem; margin-top: 0.5rem;">
                Requieren reposici√≥n inmediata
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        avg_coverage = data['dias_cobertura'].mean()
        coverage_icon = "üìà" if avg_coverage > 15 else "üìä" if avg_coverage > 7 else "üìâ"
        
        st.markdown(f"""
        <div class="metric-container" style="border-top-color: #4ECDC4;">
            <div style="font-size: 2.5rem; margin-bottom: 0.5rem;">{coverage_icon}</div>
            <div class="metric-value" style="color: #4ECDC4;">{avg_coverage:.1f}</div>
            <div class="metric-label">D√≠as Cobertura Promedio</div>
            <div style="color: #7f8c8d; font-size: 0.8rem; margin-top: 0.5rem;">
                Stock actual √∑ consumo diario
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        # Valor total en riesgo (productos cr√≠ticos)
        critical_products = data[data['estado_stock'] == 'CR√çTICO']
        risk_value = (critical_products['stock'] * critical_products.get('precio', 0)).sum()
        
        st.markdown(f"""
        <div class="metric-container" style="border-top-color: #FF8800;">
            <div style="font-size: 2.5rem; margin-bottom: 0.5rem;">üí∞</div>
            <div class="metric-value" style="color: #FF8800; font-size: 1.8rem;">{critical_pct:.1f}%</div>
            <div class="metric-label">Productos en Riesgo</div>
            <div style="color: #7f8c8d; font-size: 0.8rem; margin-top: 0.5rem;">
                Del total de inventario
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Insights inteligentes
    st.markdown("<br>", unsafe_allow_html=True)
    show_intelligent_insights(data, metrics)

def show_intelligent_insights(data, metrics):
    """Muestra insights inteligentes basados en los datos"""
    
    # An√°lisis autom√°tico
    critical_pct = (metrics['productos_criticos'] / metrics['total_productos'] * 100) if metrics['total_productos'] > 0 else 0
    avg_coverage = data['dias_cobertura'].mean()
    
    # Productos m√°s cr√≠ticos por curva
    curva_a_critical = len(data[(data['curva'] == 'A') & (data['estado_stock'] == 'CR√çTICO')])
    curva_b_critical = len(data[(data['curva'] == 'B') & (data['estado_stock'] == 'CR√çTICO')])
    
    st.markdown("### üß† Insights Inteligentes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Alerta principal
        if critical_pct > 20:
            alert_type = "error"
            alert_icon = "üö®"
            alert_msg = f"SITUACI√ìN CR√çTICA: {critical_pct:.1f}% de productos requieren reposici√≥n inmediata"
        elif critical_pct > 10:
            alert_type = "warning" 
            alert_icon = "‚ö†Ô∏è"
            alert_msg = f"ATENCI√ìN REQUERIDA: {critical_pct:.1f}% de productos en estado cr√≠tico"
        else:
            alert_type = "success"
            alert_icon = "‚úÖ"
            alert_msg = f"SITUACI√ìN CONTROLADA: Solo {critical_pct:.1f}% de productos cr√≠ticos"
        
        st.markdown(f"""
        <div class="alert-{alert_type}">
            {alert_icon} <strong>{alert_msg}</strong>
        </div>
        """, unsafe_allow_html=True)
        
        # Recomendaci√≥n por curva A
        if curva_a_critical > 0:
            st.markdown(f"""
            <div class="alert-warning">
                üéØ <strong>PRIORIDAD ALTA:</strong> {curva_a_critical} productos Curva A en estado cr√≠tico
                <br><small>Estos productos son estrat√©gicos y requieren atenci√≥n inmediata</small>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        # An√°lisis de cobertura
        if avg_coverage < 5:
            coverage_status = "üî¥ Cobertura muy baja"
            coverage_msg = "La mayor√≠a de productos se agotar√°n en menos de 5 d√≠as"
        elif avg_coverage < 10:
            coverage_status = "üü° Cobertura moderada"  
            coverage_msg = "Revisar pol√≠ticas de reposici√≥n y frecuencia de pedidos"
        else:
            coverage_status = "üü¢ Cobertura adecuada"
            coverage_msg = "Los niveles de stock est√°n dentro de rangos aceptables"
        
        st.markdown(f"""
        <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; border-left: 4px solid #667eea;">
            <strong>{coverage_status}</strong><br>
            <small style="color: #6c757d;">{coverage_msg}</small>
        </div>
        """, unsafe_allow_html=True)
        
        # Top 3 productos m√°s cr√≠ticos
        top_critical = data[data['estado_stock'] == 'CR√çTICO'].nsmallest(3, 'dias_cobertura')
        if len(top_critical) > 0:
            st.markdown("**üî• M√°s Urgentes:**")
            for _, product in top_critical.iterrows():
                st.markdown(f"‚Ä¢ **{product['codigo']}** - {product['descripcion'][:25]}... ({product['dias_cobertura']:.1f} d√≠as)")

def show_dashboard_tab(analyzer):
    """Tab del dashboard principal"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_status = analyzer.create_status_distribution_chart()
        st.plotly_chart(fig_status, use_container_width=True, key="dashboard_status_distribution")
    
    with col2:
        fig_curva = analyzer.create_coverage_by_curva_chart()
        st.plotly_chart(fig_curva, use_container_width=True, key="dashboard_coverage_by_curva")
    
    # Gr√°fico de productos cr√≠ticos
    fig_critical = analyzer.create_critical_products_chart()
    st.plotly_chart(fig_critical, use_container_width=True, key="dashboard_critical_products")

def show_curva_abc_tab(analyzer):
    """Tab dedicado al an√°lisis por Curva ABC"""
    
    data = analyzer.data
    
    st.markdown("### üéØ An√°lisis por Curva ABC - Consumo Estrat√©gico")
    
    st.markdown("""
    <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem;">
        <h4 style="color: #2c3e50; margin-bottom: 1rem;">üí° ¬øQu√© es la Curva ABC?</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 1rem;">
            <div style="text-align: center; padding: 1rem; background: white; border-radius: 8px; border-left: 4px solid #FF6B6B;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üî¥</div>
                <strong>Curva A</strong><br>
                <small>80% del consumo<br>Productos M√ÅS consumidos<br>M√°xima prioridad</small>
            </div>
            <div style="text-align: center; padding: 1rem; background: white; border-radius: 8px; border-left: 4px solid #4ECDC4;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üü°</div>
                <strong>Curva B</strong><br>
                <small>15% del consumo<br>Consumo moderado<br>Prioridad media</small>
            </div>
            <div style="text-align: center; padding: 1rem; background: white; border-radius: 8px; border-left: 4px solid #45B7D1;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">üü¢</div>
                <strong>Curva C</strong><br>
                <small>5% del consumo<br>Productos MENOS consumidos<br>Menor prioridad</small>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 2rem;">
        <strong>üß† Insight Clave:</strong> La Curva C suele tener M√ÅS productos cr√≠ticos porque al consumirse poco, 
        es f√°cil que se acumulen o que el stock no se rote adecuadamente, generando mayor criticidad.
    </div>
    """, unsafe_allow_html=True)
    
    # An√°lisis por cada curva
    available_curvas = sorted(data['curva'].unique())
    
    # Mostrar distribuci√≥n general
    col1, col2, col3 = st.columns(3)
    
    for i, curva in enumerate(['A', 'B', 'C']):
        curva_data = data[data['curva'] == curva] if curva in available_curvas else pd.DataFrame()
        total_products = len(curva_data)
        critical_count = len(curva_data[curva_data['estado_stock'] == 'CR√çTICO']) if len(curva_data) > 0 else 0
        
        with [col1, col2, col3][i]:
            color = ['#FF6B6B', '#4ECDC4', '#45B7D1'][i]
            icon = ['üî¥', 'üü°', 'üü¢'][i]
            
            st.markdown(f"""
            <div style="background: white; padding: 1.5rem; border-radius: 10px; text-align: center; border-left: 4px solid {color};">
                <div style="font-size: 2.5rem; margin-bottom: 0.5rem;">{icon}</div>
                <h3 style="color: {color}; margin-bottom: 0.5rem;">Curva {curva}</h3>
                <div style="font-size: 1.8rem; font-weight: bold; color: #2c3e50;">{total_products}</div>
                <div style="color: #7f8c8d; margin-bottom: 0.5rem;">Productos totales</div>
                {f'<div style="color: #FF4444; font-weight: bold;">{critical_count} cr√≠ticos</div>' if critical_count > 0 else '<div style="color: #44AA44;">Sin productos cr√≠ticos</div>'}
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Explicaci√≥n si solo hay una curva
    if len(available_curvas) == 1:
        st.markdown(f"""
        <div style="background: #e3f2fd; padding: 1rem; border-radius: 8px; border-left: 4px solid #2196f3; margin-bottom: 1rem;">
            <strong>‚ÑπÔ∏è Informaci√≥n:</strong> En tu an√°lisis actual solo aparece <strong>Curva {available_curvas[0]}</strong>. 
            Esto significa que todos los productos analizados est√°n clasificados en esta categor√≠a seg√∫n su nivel de consumo.
        </div>
        """, unsafe_allow_html=True)
    
    # Selector de curva para an√°lisis detallado
    selected_curva = st.selectbox(
        "üîç Selecciona una curva para an√°lisis detallado:",
        options=available_curvas,
        index=0,
        help="Selecciona la curva que quieres analizar en detalle"
    )
    
    # Mostrar an√°lisis detallado de la curva seleccionada
    show_detailed_curva_analysis(analyzer, data, selected_curva)

def show_services_analysis_tab(analyzer):
    """Tab de an√°lisis EXPERTO por servicios - Enfoque Stock y Criticidad"""
    
    data = analyzer.data
    
    st.markdown("### üçΩÔ∏è An√°lisis Experto por Servicios - Stock vs Criticidad")
    
    # Informaci√≥n resumida para el usuario (sin debug t√©cnico)
    if 'servicio' in data.columns:
        unique_services = data['servicio'].nunique()
        total_products = len(data)
        
    # Calcular estad√≠sticas para mostrar
    productos_con_consumo = len(data[data['consumo_diario'] > 0])
    productos_sin_consumo = len(data[data['consumo_diario'] == 0])
    
    st.markdown(f"""
    <div style="background: #e8f5e8; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #28a745; margin-bottom: 2rem;">
        <h4 style="color: #2c3e50; margin-bottom: 1rem;">üìä Resumen Completo del An√°lisis</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
            <div>
                <strong>üì¶ Stock Total:</strong> {total_products} productos<br>
                <strong>üìÖ Per√≠odo:</strong> 8 d√≠as (01/09 - 08/09/2025)<br>
                <strong>üçΩÔ∏è Servicios:</strong> {unique_services} detectados
            </div>
            <div>
                <strong>‚úÖ Con Consumo:</strong> {productos_con_consumo} productos<br>
                <strong>üìã Sin Consumo:</strong> {productos_sin_consumo} productos<br>
                <small style="color: #6c757d;">Productos en inventario pero no consumidos en el per√≠odo</small>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Verificar si hay informaci√≥n de servicios
    if 'servicio' not in data.columns:
        st.markdown("""
        <div style="background: #fff3cd; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #ffc107; margin: 2rem 0;">
            <h4>üîß Informaci√≥n del Procesamiento</h4>
            <p><strong>Estado:</strong> Los servicios no se detectaron en el procesamiento actual.</p>
            <p><strong>Causa probable:</strong> El procesador necesita ser ajustado para detectar correctamente los m√∫ltiples servicios en tu archivo.</p>
            <p><strong>Soluci√≥n:</strong> El sistema est√° procesando todos los datos como un solo servicio consolidado.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # An√°lisis consolidado cuando no hay servicios separados
        show_consolidated_expert_analysis(analyzer, data)
        
        # AN√ÅLISIS INTUITIVO POR SERVICIOS (Simulado basado en datos)
        st.markdown("---")
        show_intuitive_service_breakdown(analyzer, data)
        return
    
    # An√°lisis por servicios (cuando est√°n disponibles)
    all_services = data['servicio'].unique()
    
    # Filtrar servicios reales (eliminar "X servicios")
    real_services = [s for s in all_services if not str(s).endswith('servicios') and str(s) != 'nan']
    
    if len(real_services) <= 1:
        st.markdown("""
        <div style="background: #e3f2fd; padding: 1rem; border-radius: 8px; border-left: 4px solid #2196f3;">
            <strong>‚ÑπÔ∏è An√°lisis Consolidado:</strong> Mostrando an√°lisis consolidado de todos los servicios.
        </div>
        """, unsafe_allow_html=True)
        show_consolidated_expert_analysis(analyzer, data)
        show_intuitive_service_breakdown(analyzer, data)
        return
    
    services = real_services
    
    # An√°lisis directo sin mostrar informaci√≥n t√©cnica confusa
    st.markdown("#### üçΩÔ∏è An√°lisis por Servicios de Alimentaci√≥n")
    
    st.markdown("""
    <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-bottom: 2rem;">
        <strong>üìä An√°lisis Consolidado:</strong> Productos agrupados por servicio seg√∫n su consumo hist√≥rico
    </div>
    """, unsafe_allow_html=True)
    
    # Selector de servicio
    selected_service = st.selectbox(
        "üîç Selecciona un servicio para an√°lisis detallado:",
        options=sorted(services),
        index=0
    )
    
    # An√°lisis del servicio seleccionado
    service_data = data[data['servicio'] == selected_service]
    
    if len(service_data) == 0:
        st.warning(f"No hay datos para el servicio {selected_service}")
        return
    
    # M√©tricas del servicio
    col1, col2, col3, col4 = st.columns(4)
    
    total_products = len(service_data)
    critical_count = len(service_data[service_data['estado_stock'] == 'CR√çTICO'])
    avg_consumption = service_data['consumo_diario'].mean()
    total_consumption = service_data['consumo_diario'].sum()
    
    with col1:
        st.metric("üì¶ Productos", total_products)
    
    with col2:
        st.metric("üö® Cr√≠ticos", critical_count)
    
    with col3:
        st.metric("‚ö° Consumo Promedio", f"{avg_consumption:.1f}")
    
    with col4:
        st.metric("üìä Consumo Total", f"{total_consumption:.1f}")
    
    # Distribuci√≥n por curva en este servicio
    st.markdown("#### üìä Distribuci√≥n por Curva ABC en este Servicio")
    
    curva_dist = service_data['curva'].value_counts()
    
    col1, col2 = st.columns(2)
    
    with col1:
        if len(curva_dist) > 0:
            fig_curva_service = px.pie(
                values=curva_dist.values,
                names=curva_dist.index,
                title=f"Distribuci√≥n ABC - {selected_service}",
                color=curva_dist.index,
                color_discrete_map={
                    'A': '#FF6B6B',
                    'B': '#4ECDC4', 
                    'C': '#45B7D1'
                }
            )
            fig_curva_service.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_curva_service, use_container_width=True, key=f"service_curva_{selected_service}")
    
    with col2:
        st.markdown("**Productos por Curva:**")
        for curva, count in curva_dist.items():
            pct = (count / total_products * 100)
            color_icons = {'A': 'üî¥', 'B': 'üü°', 'C': 'üü¢'}
            icon = color_icons.get(curva, '‚ö™')
            st.markdown(f"{icon} **Curva {curva}**: {count} productos ({pct:.1f}%)")
    
    # Top productos m√°s consumidos en este servicio
    st.markdown("#### üèÜ Top 10 Productos M√°s Consumidos")
    
    top_consumed = service_data.nlargest(10, 'consumo_diario')
    
    if len(top_consumed) > 0:
        st.dataframe(
            top_consumed[['codigo', 'descripcion', 'curva', 'consumo_diario', 'estado_stock']],
            width='stretch',
            hide_index=True,
            column_config={
                'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
                'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
                'curva': st.column_config.TextColumn('Curva', width='small'),
                'consumo_diario': st.column_config.NumberColumn('Consumo Diario', format='%.2f'),
                'estado_stock': st.column_config.TextColumn('Estado', width='small')
            }
        )
    
    # Comparaci√≥n entre servicios
    st.markdown("#### üìà Comparaci√≥n entre Servicios")
    
    services_comparison = data.groupby('servicio').agg({
        'codigo': 'count',
        'consumo_diario': ['sum', 'mean'],
        'estado_stock': lambda x: (x == 'CR√çTICO').sum()
    }).round(2)
    
    services_comparison.columns = ['Total Productos', 'Consumo Total', 'Consumo Promedio', 'Productos Cr√≠ticos']
    services_comparison = services_comparison.reset_index()
    
    st.dataframe(services_comparison, width='stretch', hide_index=True)

def show_consolidated_expert_analysis(analyzer, data):
    """An√°lisis EXPERTO consolidado - Enfoque Stock y Criticidad"""
    
    st.markdown("### üéØ An√°lisis Experto Consolidado - Stock vs Criticidad")
    
    # 1. AN√ÅLISIS DE RIESGO OPERACIONAL
    st.markdown("#### üö® An√°lisis de Riesgo Operacional")
    
    # Calcular m√©tricas de riesgo
    total_products = len(data)
    critical_products = len(data[data['estado_stock'] == 'CR√çTICO'])
    low_products = len(data[data['estado_stock'] == 'BAJO'])
    risk_products = critical_products + low_products
    
    # Productos sin stock
    zero_stock = len(data[data['stock'] <= 0])
    
    # Productos de alta rotaci√≥n en riesgo (Curva A cr√≠ticos)
    high_rotation_risk = len(data[(data['curva'] == 'A') & (data['estado_stock'].isin(['CR√çTICO', 'BAJO']))])
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        risk_pct = (risk_products / total_products * 100) if total_products > 0 else 0
        st.metric(
            "üö® Riesgo Total", 
            f"{risk_pct:.1f}%",
            delta=f"{risk_products} productos",
            help="Productos cr√≠ticos + bajos que requieren atenci√≥n"
        )
    
    with col2:
        st.metric(
            "‚ùå Sin Stock", 
            zero_stock,
            delta=f"{(zero_stock/total_products*100):.1f}%" if total_products > 0 else "0%",
            help="Productos completamente agotados"
        )
    
    with col3:
        st.metric(
            "üî¥ Alta Rotaci√≥n en Riesgo", 
            high_rotation_risk,
            help="Productos Curva A (alta importancia) con problemas de stock"
        )
    
    with col4:
        avg_coverage = data['dias_cobertura'].mean()
        coverage_status = "üü¢" if avg_coverage > 10 else "üü°" if avg_coverage > 5 else "üî¥"
        st.metric(
            f"{coverage_status} Cobertura Promedio", 
            f"{avg_coverage:.1f} d√≠as",
            help="D√≠as promedio hasta agotamiento seg√∫n consumo actual"
        )
    
    # 2. MATRIZ DE CRITICIDAD INTELIGENTE
    st.markdown("#### üéØ Matriz de Criticidad Inteligente")
    
    # Crear matriz de criticidad: Curva ABC vs Estado de Stock
    criticality_matrix = pd.crosstab(data['curva'], data['estado_stock'], margins=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Matriz: Curva ABC vs Estado Stock**")
        st.dataframe(criticality_matrix, width='stretch')
    
    with col2:
        # An√°lisis de la matriz
        st.markdown("**üß† Interpretaci√≥n Experta:**")
        
        curva_a_critical = criticality_matrix.loc['A', 'CR√çTICO'] if 'A' in criticality_matrix.index and 'CR√çTICO' in criticality_matrix.columns else 0
        curva_b_critical = criticality_matrix.loc['B', 'CR√çTICO'] if 'B' in criticality_matrix.index and 'CR√çTICO' in criticality_matrix.columns else 0
        curva_c_critical = criticality_matrix.loc['C', 'CR√çTICO'] if 'C' in criticality_matrix.index and 'CR√çTICO' in criticality_matrix.columns else 0
        
        if curva_a_critical > 0:
            st.markdown(f"üö® **ALERTA M√ÅXIMA:** {curva_a_critical} productos Curva A cr√≠ticos")
        
        if curva_c_critical > curva_a_critical + curva_b_critical:
            st.markdown("‚úÖ **Patr√≥n Normal:** M√°s criticidad en Curva C (bajo consumo)")
        
        if curva_b_critical > 0:
            st.markdown(f"‚ö†Ô∏è **Atenci√≥n:** {curva_b_critical} productos Curva B requieren seguimiento")
    
    # 3. TOP PRODUCTOS DE ALTO RIESGO
    st.markdown("#### üî• Top 15 Productos de Mayor Riesgo")
    
    # Calcular score de riesgo
    data_risk = data.copy()
    
    # Score de riesgo basado en m√∫ltiples factores
    data_risk['risk_score'] = 0
    
    # Factor 1: D√≠as de cobertura (menor = mayor riesgo)
    data_risk['risk_score'] += (10 - data_risk['dias_cobertura']).clip(lower=0) * 2
    
    # Factor 2: Importancia por curva (A=alta, B=media, C=baja)
    curva_weight = {'A': 10, 'B': 5, 'C': 1}
    data_risk['risk_score'] += data_risk['curva'].map(curva_weight).fillna(1)
    
    # Factor 3: Estado cr√≠tico
    estado_weight = {'CR√çTICO': 20, 'BAJO': 10, 'NORMAL': 2, 'ALTO': 1}
    data_risk['risk_score'] += data_risk['estado_stock'].map(estado_weight).fillna(1)
    
    # Factor 4: Alto consumo
    data_risk['risk_score'] += (data_risk['consumo_diario'] / data_risk['consumo_diario'].max() * 5).fillna(0)
    
    # Top productos de riesgo
    top_risk = data_risk.nlargest(15, 'risk_score')
    
    st.dataframe(
        top_risk[['codigo', 'descripcion', 'curva', 'stock', 'consumo_diario', 'dias_cobertura', 'estado_stock', 'risk_score']],
        width='stretch',
        hide_index=True,
        column_config={
            'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
            'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
            'curva': st.column_config.TextColumn('Curva', width='small'),
            'stock': st.column_config.NumberColumn('Stock', format='%.1f'),
            'consumo_diario': st.column_config.NumberColumn('Consumo/d√≠a', format='%.2f'),
            'dias_cobertura': st.column_config.NumberColumn('D√≠as Cob.', format='%.1f'),
            'estado_stock': st.column_config.TextColumn('Estado', width='small'),
            'risk_score': st.column_config.NumberColumn('Score Riesgo', format='%.1f', help='Score calculado: d√≠as cobertura + curva + estado + consumo')
        }
    )
    
    # 4. RECOMENDACIONES INTELIGENTES
    st.markdown("#### üí° Recomendaciones Estrat√©gicas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üéØ Acciones Inmediatas:**")
        
        if curva_a_critical > 0:
            st.markdown(f"‚Ä¢ üö® **URGENTE:** Reponer {curva_a_critical} productos Curva A cr√≠ticos")
        
        if zero_stock > 0:
            st.markdown(f"‚Ä¢ ‚ùå **CR√çTICO:** {zero_stock} productos sin stock - revisar inmediatamente")
        
        urgent_products = len(data[data['dias_cobertura'] <= 1])
        if urgent_products > 0:
            st.markdown(f"‚Ä¢ ‚è∞ **HOY:** {urgent_products} productos se agotan en ‚â§1 d√≠a")
        
        very_urgent = len(data[data['dias_cobertura'] <= 3])
        if very_urgent > 0:
            st.markdown(f"‚Ä¢ üìÖ **Esta Semana:** {very_urgent} productos se agotan en ‚â§3 d√≠as")
    
    with col2:
        st.markdown("**üìà Optimizaciones:**")
        
        # Productos con exceso de stock
        excess_stock = len(data[data['dias_cobertura'] > 30])
        if excess_stock > 0:
            st.markdown(f"‚Ä¢ üì¶ **Revisar:** {excess_stock} productos con +30 d√≠as de cobertura")
        
        # Balance por curva
        curva_balance = data.groupby('curva')['dias_cobertura'].mean()
        for curva, avg_days in curva_balance.items():
            target_days = {'A': 7, 'B': 14, 'C': 21}
            target = target_days.get(curva, 14)
            
            if avg_days < target * 0.5:
                st.markdown(f"‚Ä¢ üî¥ **Curva {curva}:** Cobertura muy baja ({avg_days:.1f}d vs {target}d objetivo)")
            elif avg_days > target * 2:
                st.markdown(f"‚Ä¢ üü° **Curva {curva}:** Posible sobrestock ({avg_days:.1f}d vs {target}d objetivo)")
    
    # 5. PROYECCI√ìN DE QUIEBRES
    st.markdown("#### üìÖ Proyecci√≥n de Quiebres (Pr√≥ximos 7 d√≠as)")
    
    # Productos que se agotar√°n en los pr√≥ximos d√≠as
    next_days = [1, 2, 3, 7]
    breakage_forecast = []
    
    for days in next_days:
        products_breaking = len(data[data['dias_cobertura'] <= days])
        breakage_forecast.append({
            'Plazo': f"‚â§ {days} d√≠a{'s' if days > 1 else ''}",
            'Productos': products_breaking,
            'Porcentaje': f"{(products_breaking/total_products*100):.1f}%" if total_products > 0 else "0%"
        })
    
    forecast_df = pd.DataFrame(breakage_forecast)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.dataframe(forecast_df, width='stretch', hide_index=True)
    
    with col2:
        # Gr√°fico de proyecci√≥n
        fig_forecast = px.bar(
            forecast_df,
            x='Plazo',
            y='Productos',
            title='Productos que se Agotar√°n',
            color='Productos',
            color_continuous_scale='Reds'
        )
        st.plotly_chart(fig_forecast, use_container_width=True, key="breakage_forecast")

def show_intuitive_service_breakdown(analyzer, data):
    """An√°lisis intuitivo por servicios con explicaciones claras"""
    
    st.markdown("### üçΩÔ∏è An√°lisis Intuitivo por Tipo de Servicio")
    
    st.markdown("""
    <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 10px; margin-bottom: 2rem;">
        <h4 style="color: #2c3e50;">üí° ¬øC√≥mo funciona este an√°lisis?</h4>
        <p><strong>1. Datos de Consumo:</strong> Tomamos el consumo de cada producto durante 8 d√≠as (01/09 - 08/09/2025)</p>
        <p><strong>2. Consumo Diario:</strong> Dividimos el consumo total √∑ 8 d√≠as = consumo promedio por d√≠a</p>
        <p><strong>3. Stock Actual:</strong> Comparamos con el inventario actual que tienes</p>
        <p><strong>4. D√≠as de Cobertura:</strong> Stock actual √∑ consumo diario = cu√°ntos d√≠as te durar√°</p>
    </div>
    """, unsafe_allow_html=True)
    
    # An√°lisis por categor√≠as de productos (simulando servicios)
    st.markdown("#### üîç An√°lisis por Categor√≠as de Productos")
    
    # Categorizar productos por tipo
    data_categorized = data.copy()
    
    def categorize_product(description):
        desc = str(description).upper()
        if any(word in desc for word in ['HUEVO', 'PAN', 'LECHE', 'YOGURT', 'MANTEQUILLA', 'CAFE', 'TE']):
            return 'Desayuno'
        elif any(word in desc for word in ['EMPANADA', 'POLLO', 'CARNE', 'ARROZ', 'PAPA', 'VERDURA']):
            return 'Almuerzo/Cena'
        elif any(word in desc for word in ['GALLETA', 'CHOCOLATE', 'GASEOSA', 'AGUA', 'JUGO']):
            return 'Colaciones'
        elif any(word in desc for word in ['POSTRE', 'HELADO', 'FLAN', 'DULCE']):
            return 'Postres'
        else:
            return 'Otros'
    
    data_categorized['categoria_servicio'] = data_categorized['descripcion'].apply(categorize_product)
    
    # An√°lisis por categor√≠a
    category_analysis = data_categorized.groupby('categoria_servicio').agg({
        'codigo': 'count',
        'stock': 'sum',
        'consumo_diario': 'sum',
        'dias_cobertura': 'mean',
        'estado_stock': lambda x: (x == 'CR√çTICO').sum()
    }).round(2)
    
    category_analysis.columns = ['Total Productos', 'Stock Total', 'Consumo Diario Total', 'Cobertura Promedio', 'Productos Cr√≠ticos']
    category_analysis = category_analysis.reset_index()
    category_analysis.columns = ['Categor√≠a', 'Total Productos', 'Stock Total', 'Consumo Diario Total', 'Cobertura Promedio', 'Productos Cr√≠ticos']
    
    st.markdown("**üìä Resumen por Categor√≠a de Productos:**")
    st.dataframe(category_analysis, width='stretch', hide_index=True)
    
    # Explicaci√≥n de cada categor√≠a
    st.markdown("#### üí° Explicaci√≥n de C√°lculos por Categor√≠a")
    
    for _, category in category_analysis.iterrows():
        cat_name = category['Categor√≠a']
        total_products = int(category['Total Productos'])
        stock_total = category['Stock Total']
        consumo_total = category['Consumo Diario Total']
        cobertura_prom = category['Cobertura Promedio']
        criticos = int(category['Productos Cr√≠ticos'])
        
        with st.expander(f"üîç {cat_name} - {total_products} productos", expanded=(criticos > 0)):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìä Datos Actuales:**")
                st.markdown(f"‚Ä¢ **Stock Total**: {stock_total:,.1f} unidades")
                st.markdown(f"‚Ä¢ **Consumo Diario**: {consumo_total:,.1f} unidades/d√≠a")
                st.markdown(f"‚Ä¢ **Cobertura Promedio**: {cobertura_prom:.1f} d√≠as")
                st.markdown(f"‚Ä¢ **Productos Cr√≠ticos**: {criticos}")
            
            with col2:
                st.markdown("**üßÆ C√≥mo se Calcul√≥:**")
                st.markdown(f"1. **Per√≠odo**: 8 d√≠as (01/09 - 08/09/2025)")
                st.markdown(f"2. **Consumo Diario**: Consumo total √∑ 8 d√≠as")
                st.markdown(f"3. **Cobertura**: Stock actual √∑ consumo diario")
                st.markdown(f"4. **Cr√≠tico**: Si cobertura < umbral por curva ABC")
            
            # Mostrar productos cr√≠ticos de esta categor√≠a
            cat_data = data_categorized[data_categorized['categoria_servicio'] == cat_name]
            cat_critical = cat_data[cat_data['estado_stock'] == 'CR√çTICO']
            
            if len(cat_critical) > 0:
                st.markdown(f"**üö® Productos Cr√≠ticos en {cat_name}:**")
                st.dataframe(
                    cat_critical[['codigo', 'descripcion', 'stock', 'consumo_diario', 'dias_cobertura']].head(5),
                    width='stretch',
                    hide_index=True,
                    column_config={
                        'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
                        'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
                        'stock': st.column_config.NumberColumn('Stock Actual', format='%.1f'),
                        'consumo_diario': st.column_config.NumberColumn('Consumo/d√≠a', format='%.2f'),
                        'dias_cobertura': st.column_config.NumberColumn('D√≠as Cobertura', format='%.1f')
                    }
                )
                
                # Explicaci√≥n espec√≠fica para productos cr√≠ticos
                st.markdown(f"""
                <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107;">
                    <strong>üß† Interpretaci√≥n:</strong> Estos productos de {cat_name} se agotar√°n pronto porque 
                    su consumo diario es alto comparado con el stock actual disponible.
                </div>
                """, unsafe_allow_html=True)
    
    # Gr√°fico comparativo por categor√≠a
    st.markdown("#### üìà Comparaci√≥n Visual por Categor√≠as")
    
    fig_categories = px.scatter(
        category_analysis,
        x='Consumo Diario Total',
        y='Cobertura Promedio', 
        size='Total Productos',
        color='Productos Cr√≠ticos',
        hover_name='Categor√≠a',
        title='Consumo vs Cobertura por Categor√≠a',
        labels={
            'Consumo Diario Total': 'Consumo Diario Total (unidades/d√≠a)',
            'Cobertura Promedio': 'D√≠as de Cobertura Promedio',
            'Productos Cr√≠ticos': 'Productos Cr√≠ticos'
        },
        color_continuous_scale='Reds'
    )
    
    st.plotly_chart(fig_categories, use_container_width=True, key="categories_analysis")
    
    # Explicaci√≥n del gr√°fico
    st.markdown("""
    <div style="background: #e8f5e8; padding: 1rem; border-radius: 8px; border-left: 4px solid #28a745;">
        <strong>üìä C√≥mo leer el gr√°fico:</strong><br>
        ‚Ä¢ <strong>Eje X (Consumo Diario):</strong> Cu√°nto se consume por d√≠a de esa categor√≠a<br>
        ‚Ä¢ <strong>Eje Y (Cobertura):</strong> Cu√°ntos d√≠as dura el stock actual<br>
        ‚Ä¢ <strong>Tama√±o del c√≠rculo:</strong> Cantidad de productos en esa categor√≠a<br>
        ‚Ä¢ <strong>Color rojo:</strong> M√°s productos cr√≠ticos en esa categor√≠a
    </div>
    """, unsafe_allow_html=True)

def show_detailed_curva_analysis(analyzer, data, curva):
    """An√°lisis detallado de una curva espec√≠fica"""
    
    curva_data = data[data['curva'] == curva]
    
    if len(curva_data) == 0:
        st.warning(f"No hay productos en la Curva {curva}")
        return
    
    # Informaci√≥n contextual
    curva_info = {
        'A': {
            'title': 'üî¥ Curva A - Productos Estrat√©gicos',
            'description': 'Estos productos representan el 80% de tu consumo. Son cr√≠ticos para la operaci√≥n.',
            'color': '#FF6B6B',
            'priority': 'M√ÅXIMA PRIORIDAD'
        },
        'B': {
            'title': 'üü° Curva B - Productos Importantes', 
            'description': 'Representan el 15% del consumo. Importantes pero con menor rotaci√≥n que A.',
            'color': '#4ECDC4',
            'priority': 'PRIORIDAD MEDIA'
        },
        'C': {
            'title': 'üü¢ Curva C - Productos de Bajo Consumo',
            'description': 'Solo el 5% del consumo total. Menor rotaci√≥n y prioridad.',
            'color': '#45B7D1', 
            'priority': 'MENOR PRIORIDAD'
        }
    }
    
    info = curva_info.get(curva, curva_info['C'])
    
    st.markdown(f"""
    <div style="background: {info['color']}15; padding: 1.5rem; border-radius: 10px; border-left: 4px solid {info['color']}; margin-bottom: 2rem;">
        <h4 style="color: {info['color']}; margin-bottom: 0.5rem;">{info['title']}</h4>
        <p style="color: #2c3e50; margin-bottom: 0.5rem;">{info['description']}</p>
        <strong style="color: {info['color']};">üéØ {info['priority']}</strong>
    </div>
    """, unsafe_allow_html=True)
    
    # M√©tricas de la curva
    col1, col2, col3, col4 = st.columns(4)
    
    total_products = len(curva_data)
    critical_count = len(curva_data[curva_data['estado_stock'] == 'CR√çTICO'])
    avg_consumption = curva_data['consumo_diario'].mean()
    avg_coverage = curva_data['dias_cobertura'].mean()
    
    with col1:
        st.metric("üì¶ Total Productos", total_products)
    
    with col2:
        st.metric("üö® Productos Cr√≠ticos", critical_count, 
                 delta=f"{(critical_count/total_products*100):.1f}%" if total_products > 0 else "0%")
    
    with col3:
        st.metric("‚ö° Consumo Diario Promedio", f"{avg_consumption:.1f}")
    
    with col4:
        st.metric("üìä Cobertura Promedio", f"{avg_coverage:.1f} d√≠as")
    
    # Estados de stock para esta curva
    st.markdown("#### üìä Distribuci√≥n por Estado de Stock")
    
    status_dist = curva_data['estado_stock'].value_counts()
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de estados
        fig_status = px.pie(
            values=status_dist.values,
            names=status_dist.index,
            title=f"Estados de Stock - Curva {curva}",
            color=status_dist.index,
            color_discrete_map={
                'CR√çTICO': '#FF4444',
                'BAJO': '#FF8800', 
                'NORMAL': '#44AA44',
                'ALTO': '#0088FF'
            }
        )
        fig_status.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_status, use_container_width=True, key=f"detailed_status_chart_curva_{curva}")
    
    with col2:
        st.markdown("**Resumen por Estado:**")
        for estado, count in status_dist.items():
            pct = (count / total_products * 100) if total_products > 0 else 0
            color_icons = {
                'CR√çTICO': 'üö®',
                'BAJO': '‚ö†Ô∏è',
                'NORMAL': '‚úÖ', 
                'ALTO': 'üìà'
            }
            icon = color_icons.get(estado, '‚ö™')
            st.markdown(f"{icon} **{estado}**: {count} productos ({pct:.1f}%)")
    
    # Productos m√°s cr√≠ticos de esta curva
    critical_products = curva_data[curva_data['estado_stock'] == 'CR√çTICO'].nsmallest(10, 'dias_cobertura')
    
    if len(critical_products) > 0:
        st.markdown(f"#### üö® Productos Cr√≠ticos en Curva {curva}")
        st.markdown(f"""
        <div style="background: #fff3cd; padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 1rem;">
            <strong>‚ö†Ô∏è ATENCI√ìN:</strong> {len(critical_products)} productos de Curva {curva} requieren reposici√≥n inmediata.
            {' Estos son productos estrat√©gicos de alto consumo.' if curva == 'A' else ''}
        </div>
        """, unsafe_allow_html=True)
        
        st.dataframe(
            critical_products[['codigo', 'descripcion', 'stock', 'consumo_diario', 'dias_cobertura']],
            width='stretch',
            hide_index=True,
            column_config={
                'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
                'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
                'stock': st.column_config.NumberColumn('Stock Actual', format='%.2f'),
                'consumo_diario': st.column_config.NumberColumn('Consumo Diario', format='%.2f'),
                'dias_cobertura': st.column_config.NumberColumn('D√≠as Cobertura', format='%.1f')
            }
        )
    else:
        st.markdown(f"""
        <div style="background: #d1edff; padding: 1rem; border-radius: 8px; border-left: 4px solid #0088ff;">
            <strong>‚úÖ Excelente:</strong> No hay productos cr√≠ticos en Curva {curva}
        </div>
        """, unsafe_allow_html=True)
    
    # Tabla completa con filtros
    st.markdown(f"#### üìã Todos los Productos - Curva {curva}")
    
    # Filtros
    col1, col2 = st.columns(2)
    
    with col1:
        status_filter = st.multiselect(
            "Filtrar por Estado:",
            options=curva_data['estado_stock'].unique(),
            default=curva_data['estado_stock'].unique(),
            key=f"status_filter_{curva}"
        )
    
    with col2:
        sort_options = {
            'D√≠as de Cobertura (Menor a Mayor)': ('dias_cobertura', True),
            'D√≠as de Cobertura (Mayor a Menor)': ('dias_cobertura', False), 
            'Consumo Diario (Mayor a Menor)': ('consumo_diario', False),
            'Stock Actual (Mayor a Menor)': ('stock', False)
        }
        sort_choice = st.selectbox(
            "Ordenar por:",
            options=list(sort_options.keys()),
            index=0,
            key=f"sort_choice_{curva}"
        )
    
    # Aplicar filtros
    filtered_data = curva_data[curva_data['estado_stock'].isin(status_filter)]
    
    # Aplicar ordenamiento
    sort_col, ascending = sort_options[sort_choice]
    filtered_data = filtered_data.sort_values(sort_col, ascending=ascending)
    
    if len(filtered_data) > 0:
        st.markdown(f"**Mostrando {len(filtered_data)} de {len(curva_data)} productos**")
        
        st.dataframe(
            filtered_data[['codigo', 'descripcion', 'stock', 'consumo_diario', 'dias_cobertura', 'estado_stock']],
            width='stretch',
            hide_index=True,
            column_config={
                'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
                'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
                'stock': st.column_config.NumberColumn('Stock', format='%.2f'),
                'consumo_diario': st.column_config.NumberColumn('Consumo Diario', format='%.2f'),
                'dias_cobertura': st.column_config.NumberColumn('D√≠as Cobertura', format='%.1f'),
                'estado_stock': st.column_config.TextColumn('Estado', width='small')
            }
        )
    else:
        st.warning("No hay productos que coincidan con los filtros seleccionados")

def show_advanced_analysis_tab(analyzer):
    """Tab de an√°lisis detallado completamente redise√±ado"""
    
    data = analyzer.data
    
    st.markdown("### üîç An√°lisis Detallado por Segmentos")
    
    # Tabs secundarias para diferentes vistas
    sub_tab1, sub_tab2, sub_tab3, sub_tab4 = st.tabs([
        "üìä Por Curva ABC", 
        "‚ö° Por Estado", 
        "üè∑Ô∏è Por Familia",
        "üìà Tendencias"
    ])
    
    with sub_tab1:
        show_curva_analysis(analyzer, data)
    
    with sub_tab2:
        show_status_analysis(analyzer, data)
    
    with sub_tab3:
        show_family_analysis(analyzer, data)
    
    with sub_tab4:
        show_trends_analysis(analyzer, data)

def show_curva_analysis(analyzer, data):
    """An√°lisis por curva ABC mejorado"""
    
    st.markdown("#### üéØ An√°lisis por Importancia Estrat√©gica (Curva ABC)")
    
    # Mostrar todas las curvas disponibles
    available_curvas = sorted(data['curva'].unique())
    
    if len(available_curvas) == 0:
        st.warning("No hay datos de curva ABC disponibles")
        return
    
    # Selector mejorado
    col1, col2 = st.columns([1, 3])
    
    with col1:
        curva_selected = st.selectbox(
            "üîç Selecciona Curva:",
            options=available_curvas,
            index=0,
            help="A: Productos cr√≠ticos (80% valor), B: Importantes (15% valor), C: Normales (5% valor)"
        )
    
    with col2:
        # Explicaci√≥n de cada curva
        curva_info = {
            'A': "üî¥ **Productos Estrat√©gicos** - Alta rotaci√≥n, m√°xima prioridad",
            'B': "üü° **Productos Importantes** - Rotaci√≥n media, prioridad moderada", 
            'C': "üü¢ **Productos Normales** - Baja rotaci√≥n, menor prioridad"
        }
        st.markdown(curva_info.get(curva_selected, "Informaci√≥n no disponible"))
    
    # Obtener datos de la curva seleccionada
    curva_data = analyzer.get_products_by_curva(curva_selected)
    
    if len(curva_data) == 0:
        st.warning(f"No hay productos en la Curva {curva_selected}")
        return
    
    # M√©tricas de la curva seleccionada
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üì¶ Total Productos", 
            len(curva_data),
            help=f"Productos clasificados en Curva {curva_selected}"
        )
    
    with col2:
        critical_count = len(curva_data[curva_data['estado_stock'] == 'CR√çTICO'])
        critical_pct = (critical_count / len(curva_data) * 100) if len(curva_data) > 0 else 0
        st.metric(
            "üö® Cr√≠ticos", 
            critical_count,
            delta=f"{critical_pct:.1f}%",
            help="Productos que requieren reposici√≥n inmediata"
        )
    
    with col3:
        avg_coverage = curva_data['dias_cobertura'].mean()
        st.metric(
            "üìä Cobertura Promedio", 
            f"{avg_coverage:.1f} d√≠as",
            help="D√≠as promedio hasta agotamiento"
        )
    
    with col4:
        total_stock_value = (curva_data['stock'] * curva_data.get('precio', 0)).sum()
        st.metric(
            "üí∞ Valor en Stock", 
            f"${total_stock_value:,.0f}",
            help="Valor total del inventario en esta curva"
        )
    
    # Distribuci√≥n por estado
    st.markdown("#### üìä Distribuci√≥n por Estado de Stock")
    
    status_dist = curva_data['estado_stock'].value_counts()
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de distribuci√≥n
        fig_pie = px.pie(
            values=status_dist.values,
            names=status_dist.index,
            title=f"Estados de Stock - Curva {curva_selected}",
            color=status_dist.index,
            color_discrete_map={
                'CR√çTICO': '#FF4444',
                'BAJO': '#FF8800',
                'NORMAL': '#44AA44',
                'ALTO': '#0088FF'
            }
        )
        fig_pie.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_pie, use_container_width=True, key=f"pie_chart_curva_{curva_selected}")
    
    with col2:
        # Tabla resumen por estado
        st.markdown("**Resumen por Estado:**")
        for estado, count in status_dist.items():
            pct = (count / len(curva_data) * 100)
            color_map = {
                'CR√çTICO': 'üî¥',
                'BAJO': 'üü°', 
                'NORMAL': 'üü¢',
                'ALTO': 'üîµ'
            }
            icon = color_map.get(estado, '‚ö™')
            st.markdown(f"{icon} **{estado}**: {count} productos ({pct:.1f}%)")
    
    # Tabla detallada con filtros
    st.markdown("#### üìã Productos Detallados")
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.multiselect(
            "Filtrar por Estado:",
            options=curva_data['estado_stock'].unique(),
            default=curva_data['estado_stock'].unique()
        )
    
    with col2:
        min_coverage = st.number_input(
            "D√≠as m√≠nimos de cobertura:",
            min_value=0,
            max_value=int(curva_data['dias_cobertura'].max()),
            value=0
        )
    
    with col3:
        max_coverage = st.number_input(
            "D√≠as m√°ximos de cobertura:",
            min_value=0,
            max_value=int(curva_data['dias_cobertura'].max()),
            value=int(curva_data['dias_cobertura'].max())
        )
    
    # Aplicar filtros
    filtered_data = curva_data[
        (curva_data['estado_stock'].isin(status_filter)) &
        (curva_data['dias_cobertura'] >= min_coverage) &
        (curva_data['dias_cobertura'] <= max_coverage)
    ]
    
    # Mostrar datos filtrados
    if len(filtered_data) > 0:
        st.markdown(f"**Mostrando {len(filtered_data)} de {len(curva_data)} productos**")
        
        # Ordenar por criticidad
        display_data = filtered_data.sort_values(['estado_stock', 'dias_cobertura'])
        
        st.dataframe(
            display_data[['codigo', 'descripcion', 'stock', 'consumo_diario', 'dias_cobertura', 'estado_stock']],
            width='stretch',
            hide_index=True,
            column_config={
                'codigo': st.column_config.TextColumn('C√≥digo', width='small'),
                'descripcion': st.column_config.TextColumn('Descripci√≥n', width='large'),
                'stock': st.column_config.NumberColumn('Stock', format='%.2f'),
                'consumo_diario': st.column_config.NumberColumn('Consumo Diario', format='%.2f'),
                'dias_cobertura': st.column_config.NumberColumn('D√≠as Cobertura', format='%.1f'),
                'estado_stock': st.column_config.TextColumn('Estado', width='small')
            }
        )
    else:
        st.warning("No hay productos que coincidan con los filtros seleccionados")

def show_status_analysis(analyzer, data):
    """An√°lisis por estado de stock"""
    st.markdown("#### ‚ö° An√°lisis por Estado de Stock")
    
    status_counts = data['estado_stock'].value_counts()
    
    for status in ['CR√çTICO', 'BAJO', 'NORMAL', 'ALTO']:
        if status in status_counts.index:
            status_data = data[data['estado_stock'] == status]
            count = len(status_data)
            pct = (count / len(data) * 100)
            
            with st.expander(f"{status} - {count} productos ({pct:.1f}%)", expanded=(status=='CR√çTICO')):
                if len(status_data) > 0:
                    avg_coverage = status_data['dias_cobertura'].mean()
                    st.metric(f"Cobertura promedio - {status}", f"{avg_coverage:.1f} d√≠as")
                    
                    st.dataframe(
                        status_data[['codigo', 'descripcion', 'curva', 'dias_cobertura']].head(10),
                        width='stretch',
                        hide_index=True
                    )

def show_family_analysis(analyzer, data):
    """An√°lisis por familia de productos"""
    st.markdown("#### üè∑Ô∏è An√°lisis por Familia de Productos")
    
    if 'familia' not in data.columns:
        st.warning("No hay informaci√≥n de familias de productos disponible")
        return
    
    family_analysis = data.groupby('familia').agg({
        'codigo': 'count',
        'dias_cobertura': 'mean',
        'estado_stock': lambda x: (x == 'CR√çTICO').sum()
    }).rename(columns={
        'codigo': 'total_productos',
        'dias_cobertura': 'cobertura_promedio',
        'estado_stock': 'productos_criticos'
    })
    
    family_analysis['pct_criticos'] = (family_analysis['productos_criticos'] / family_analysis['total_productos'] * 100)
    family_analysis = family_analysis.sort_values('pct_criticos', ascending=False)
    
    st.dataframe(family_analysis, width='stretch')

def show_trends_analysis(analyzer, data):
    """An√°lisis de tendencias"""
    st.markdown("#### üìà An√°lisis de Tendencias y Proyecciones")
    
    # Distribuci√≥n de d√≠as de cobertura
    fig_hist = px.histogram(
        data, 
        x='dias_cobertura', 
        nbins=20,
        title="Distribuci√≥n de D√≠as de Cobertura",
        labels={'dias_cobertura': 'D√≠as de Cobertura', 'count': 'Cantidad de Productos'}
    )
    st.plotly_chart(fig_hist, use_container_width=True, key="coverage_histogram")
    
    # An√°lisis por rangos de cobertura
    coverage_ranges = pd.cut(data['dias_cobertura'], 
                           bins=[0, 3, 7, 15, 30, float('inf')], 
                           labels=['0-3 d√≠as', '4-7 d√≠as', '8-15 d√≠as', '16-30 d√≠as', '30+ d√≠as'])
    
    range_analysis = coverage_ranges.value_counts().sort_index()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Distribuci√≥n por Rangos de Cobertura:**")
        for range_name, count in range_analysis.items():
            pct = (count / len(data) * 100)
            st.markdown(f"‚Ä¢ **{range_name}**: {count} productos ({pct:.1f}%)")
    
    with col2:
        fig_bar = px.bar(
            x=range_analysis.index,
            y=range_analysis.values,
            title="Productos por Rango de Cobertura",
            labels={'x': 'Rango de D√≠as', 'y': 'Cantidad de Productos'}
        )
        st.plotly_chart(fig_bar, use_container_width=True, key="coverage_ranges_bar")

def show_export_tab(analyzer, data):
    """Tab de exportaci√≥n"""
    
    st.subheader("üì§ Descargar Reportes Profesionales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üìä Reporte Excel Ejecutivo**
        
        Incluye:
        - Resumen ejecutivo con KPIs
        - Dashboard de productos cr√≠ticos  
        - An√°lisis completo por producto
        - Reporte de reposici√≥n sugerida
        - Gr√°ficos y m√©tricas por curva ABC
        """)
        
        if st.button("üì• Generar Reporte Excel", key="generate_excel"):
            with st.spinner("Generando reporte profesional..."):
                try:
                    exporter = ExcelExporter()
                    analysis_summary = analyzer.get_summary_metrics()
                    
                    excel_file = exporter.create_professional_report(data, analysis_summary, st.session_state.processor)
                    
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"reporte_stock_critico_{timestamp}.xlsx"
                    
                    st.download_button(
                        label="üì• Descargar Reporte Completo",
                        data=excel_file,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    
                    st.success("‚úÖ Reporte generado exitosamente!")
                    
                except Exception as e:
                    st.error(f"Error generando reporte: {str(e)}")
    
    with col2:
        st.markdown("**üìã Exportaciones R√°pidas**")
        
        # Export productos cr√≠ticos
        critical_products = analyzer.get_critical_products()
        if len(critical_products) > 0:
            csv_critical = critical_products.to_csv(index=False)
            st.download_button(
                label="üì• Productos Cr√≠ticos (CSV)",
                data=csv_critical,
                file_name="productos_criticos.csv",
                mime="text/csv"
            )
        
        # Export datos completos
        csv_complete = data.to_csv(index=False)
        st.download_button(
            label="üì• An√°lisis Completo (CSV)",
            data=csv_complete,
            file_name="analisis_completo.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()